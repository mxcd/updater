package actions

import (
	"fmt"
	"strings"

	"github.com/mxcd/updater/internal/configuration"
	"github.com/mxcd/updater/internal/git"
	"github.com/rs/zerolog/log"
)

// createOrUpdatePullRequest creates a new pull request or updates an existing one
func createOrUpdatePullRequest(repo *git.Repository, targetActor *configuration.TargetActor, group *PatchGroup, updates []*UpdateItem, branchExists bool) (string, error) {
	// Create GitHub client
	githubClient, err := git.NewGitHubClient(repo.RepoURL, targetActor)
	if err != nil {
		return "", fmt.Errorf("failed to create GitHub client: %w", err)
	}

	// Build PR title and body
	prTitle := buildPRTitle(updates, group)
	prBody := buildPRBody(updates, group)

	// Create PR options
	prOptions := &git.PullRequestOptions{
		Title:      prTitle,
		Body:       prBody,
		BaseBranch: repo.BaseBranch,
		HeadBranch: repo.BranchName,
		Labels:     group.Labels,
		PatchGroup: group.Name,
	}

	// Always check if PR already exists for this branch
	// (even if branch was just created, it might have been pushed before without creating the PR)
	existingPR, err := githubClient.FindOpenPullRequest(repo.BranchName)
	if err != nil {
		log.Debug().Err(err).Msg("Failed to check for existing PR, will create new one")
	} else if existingPR != nil {
		// Update existing PR
		log.Debug().Int("pr", existingPR.Number).Msg("Found existing PR, updating it")
		if err := githubClient.UpdatePullRequest(existingPR.Number, prOptions); err != nil {
			return "", fmt.Errorf("failed to update existing PR: %w", err)
		}
		return existingPR.HTMLURL, nil
	}

	// Create new pull request
	prURL, err := githubClient.CreatePullRequest(prOptions)
	if err != nil {
		return "", err
	}

	return prURL, nil
}

// buildCommitMessage builds a commit message for the updates
func buildCommitMessage(updates []*UpdateItem, group *PatchGroup) string {
	if len(updates) == 1 {
		update := updates[0]
		return fmt.Sprintf("chore: update %s from %s to %s",
			update.ItemName,
			update.CurrentVersion,
			update.LatestVersion)
	}

	// Multiple updates
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("chore: update %d dependencies in %s\n\n", len(updates), group.Name))

	for _, update := range updates {
		sb.WriteString(fmt.Sprintf("- %s: %s â†’ %s\n",
			update.ItemName,
			update.CurrentVersion,
			update.LatestVersion))
	}

	return sb.String()
}

// buildPRTitle builds a pull request title
func buildPRTitle(updates []*UpdateItem, group *PatchGroup) string {
	if len(updates) == 1 {
		update := updates[0]
		return fmt.Sprintf("chore: update %s to %s", update.ItemName, update.LatestVersion)
	}

	return fmt.Sprintf("chore: update %d dependencies in %s", len(updates), group.Name)
}

// buildPRBody builds a pull request body
func buildPRBody(updates []*UpdateItem, group *PatchGroup) string {
	var sb strings.Builder

	sb.WriteString("## Updates\n\n")
	sb.WriteString("This PR contains the following dependency updates:\n\n")

	sb.WriteString("| Dependency | Current | Latest | Type |\n")
	sb.WriteString("|------------|---------|--------|------|\n")

	for _, update := range updates {
		sb.WriteString(fmt.Sprintf("| %s | `%s` | `%s` | %s |\n",
			update.ItemName,
			update.CurrentVersion,
			update.LatestVersion,
			update.UpdateType))
	}

	sb.WriteString("\n---\n")
	sb.WriteString(fmt.Sprintf("ðŸ¤– This PR was automatically generated by updater (patch group: %s)\n", group.Name))

	return sb.String()
}
